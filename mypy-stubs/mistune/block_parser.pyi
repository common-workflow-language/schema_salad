from typing import (
    Any,
    Dict,
    Iterable,
    List,
    Match,
    Optional,
    Pattern,
    Sequence,
    Tuple,
    Type,
)

class BlockGrammar:
    def_links: Pattern[str]
    def_footnotes: Pattern[str]
    newline: Pattern[str]
    block_code: Pattern[str]
    fences: Pattern[str]
    hrule: Pattern[str]
    heading: Pattern[str]
    lheading: Pattern[str]
    block_quote: Pattern[str]
    list_block: Pattern[str]
    list_item: Pattern[str]
    list_bullet: Pattern[str]
    paragraph: Pattern[str]
    block_html: Pattern[str]
    table: Pattern[str]
    nptable: Pattern[str]
    text: Pattern[str]

class BlockParser:
    grammar_class: Type[BlockGrammar]
    default_rules: List[str]
    list_rules: Tuple[str]
    footnote_rules: Tuple[str]
    tokens: Tokens
    def_links: Dict[str, Dict[str, str]]
    def_footnotes: Dict[str, int]
    rules = ...  # type: BlockGrammar
    def __init__(self, rules: Optional[BlockGrammar] = ..., **kwargs: Any) -> None: ...
    def __call__(self, text: str, rules: Optional[Sequence[str]] = ...) -> Tokens: ...
    def parse(self, text: str, rules: Optional[Sequence[str]] = ...) -> Tokens: ...
    def parse_newline(self, m: Match[str]) -> None: ...
    def parse_block_code(self, m: Match[str]) -> None: ...
    def parse_fences(self, m: Match[str]) -> None: ...
    def parse_heading(self, m: Match[str]) -> None: ...
    def parse_lheading(self, m: Match[str]) -> None: ...
    def parse_hrule(self, m: Match[str]) -> None: ...
    def parse_list_block(self, m: Match[str]) -> None: ...
    def parse_block_quote(self, m: Match[str]) -> None: ...
    def parse_def_links(self, m: Match[str]) -> None: ...
    def parse_def_footnotes(self, m: Match[str]) -> None: ...
    def parse_table(self, m: Match[str]) -> None: ...
    def parse_nptable(self, m: Match[str]) -> None: ...
    def parse_block_html(self, m: Match[str]) -> None: ...
    def parse_paragraph(self, m: Match[str]) -> None: ...
    def parse_text(self, m: Match[str]) -> None: ...


def cleanup_lines(s: str) -> str: ...

def expand_leading_tab(text: str) -> str: ...
