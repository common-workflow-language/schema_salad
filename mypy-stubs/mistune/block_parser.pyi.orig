import sys
from typing import (
    Any,
    ClassVar,
    Iterator,
    List,
    Match,
    Optional,
    Pattern,
    Tuple,
    Type,
    TypeVar,
    Union,
)

from mistune._types import State, Tokens
from mistune.scanner import Matcher, ScannerParser
from typing_extensions import Literal, NotRequired, Required, TypeAlias, TypedDict

ParsedBlockType = Literal[
    # base block parsers
    "heading",
    "newline",
    "thematic_break",
    "block_code",
    "block_html",
    "block_quote",
    "block_text",
    "list",
    "list_item",
    "paragraph",
    # plugin 'table'
    "table",
    "table_head",
    "table_body",
    "table_cell",
    "table_row",
    # plugin 'url'
    "url",
]
_ParsedBlock: TypeAlias = "ParsedBlock"
if sys.version_info >= (3, 7):
    ParsedTypeT = TypeVar("ParsedTypeT")
    ParsedBlock = TypedDict(
        "ParsedBlock",
        {
            "type": Required[ParsedTypeT],
            "blank": NotRequired[bool],
            "raw": NotRequired[str],
            "text": NotRequired[str],
            "params": NotRequired[Tuple[Union[int, str], ...]],
            "children": NotRequired[List[_ParsedBlock]],
        },
        total=False,
    )
    ParsedBlockHeading = ParsedBlock[Literal["heading"]]
    ParsedBlockNewline = ParsedBlock[Literal["newline"]]
    ParsedBlockThematicBreak = ParsedBlock[Literal["thematic_break"]]
    ParsedBlockBlockCode = ParsedBlock[Literal["block_code"]]
    ParsedBlockBlockHTML = ParsedBlock[Literal["block_html"]]
    ParsedBlockBlockQuote = ParsedBlock[Literal["block_quote"]]
    ParsedBlockBlockText = ParsedBlock[Literal["block_text"]]
    ParsedBlockList = ParsedBlock[Literal["list"]]
    ParsedBlockListItem = ParsedBlock[Literal["list_item"]]
    ParsedBlockParagraph = ParsedBlock[Literal["paragraph"]]
else:  # python 3.6  # no TypedDict+Generic support with TypeVar
    ParsedBlock = TypedDict(
        "ParsedBlock",
        {
            # best we can do is define an 'AnyOf' allowed literals
            # we cannot provide explicitly which literal is returned each time
            "type": Required[ParsedBlockType],
            "blank": NotRequired[bool],
            "raw": NotRequired[str],
            "text": NotRequired[str],
            "params": NotRequired[Tuple[Union[int, str], ...]],
            "children": NotRequired[List[_ParsedBlock]],
        },
        total=False,
    )
    ParsedBlockHeading = ParsedBlock
    ParsedBlockNewline = ParsedBlock
    ParsedBlockThematicBreak = ParsedBlock
    ParsedBlockBlockCode = ParsedBlock
    ParsedBlockBlockHTML = ParsedBlock
    ParsedBlockBlockQuote = ParsedBlock
    ParsedBlockBlockText = ParsedBlock
    ParsedBlockList = ParsedBlock
    ParsedBlockListItem = ParsedBlock
    ParsedBlockParagraph = ParsedBlock

def cleanup_lines(s: str) -> str: ...
def expand_leading_tab(text: str) -> str: ...
