from typing import Any, Callable, Dict, Generic, Iterable, List, Match, Optional, Tuple

from mistune._types import State
from mistune.core import BaseRenderer

Tokens = List[Dict[str, Any]]

class Markdown():

    def __init__(
        self,
        renderer: BaseRenderer,
        block: Optional[Any] = None,
        inline: Optional[Any] = None,
        plugins: Optional[Iterable[Any]] = None,
    ) -> None: ...
    def before_parse(self, s: str, state: State) -> Tuple[str, State]: ...
    def before_render(self, tokens: Tokens, state: State) -> Tokens: ...
    def after_render(self, tokens: Tokens, state: State) -> Tokens: ...
    def parse(self, s: str, state: Optional[State] = None) -> str: ...
    def read(self, filepath: str, state: Optional[State] = None) -> str: ...
    def __call__(self, s: str) -> str: ...

def preprocess(s: str, state: State) -> Tuple[str, State]: ...
