from collections.abc import Iterable
from typing import Any

from _typeshed import Incomplete

from ..core import BaseRenderer as BaseRenderer
from ..core import BlockState as BlockState
from ..util import strip_end as strip_end
from ._list import render_list as render_list

class RSTRenderer(BaseRenderer):
    NAME: str
    HEADING_MARKERS: Incomplete
    INLINE_IMAGE_PREFIX: str
    def iter_tokens(self, tokens: Iterable[dict[str, Any]], state: BlockState) -> Iterable[str]: ...
    def __call__(self, tokens: Iterable[dict[str, Any]], state: BlockState) -> str: ...
    def render_referrences(self, state: BlockState) -> Iterable[str]: ...
    def render_children(self, token: dict[str, Any], state: BlockState) -> str: ...
    def text(self, token: dict[str, Any], state: BlockState) -> str: ...
    def emphasis(self, token: dict[str, Any], state: BlockState) -> str: ...
    def strong(self, token: dict[str, Any], state: BlockState) -> str: ...
    def link(self, token: dict[str, Any], state: BlockState) -> str: ...
    def image(self, token: dict[str, Any], state: BlockState) -> str: ...
    def codespan(self, token: dict[str, Any], state: BlockState) -> str: ...
    def linebreak(self, token: dict[str, Any], state: BlockState) -> str: ...
    def softbreak(self, token: dict[str, Any], state: BlockState) -> str: ...
    def inline_html(self, token: dict[str, Any], state: BlockState) -> str: ...
    def paragraph(self, token: dict[str, Any], state: BlockState) -> str: ...
    def heading(self, token: dict[str, Any], state: BlockState) -> str: ...
    def thematic_break(self, token: dict[str, Any], state: BlockState) -> str: ...
    def block_text(self, token: dict[str, Any], state: BlockState) -> str: ...
    def block_code(self, token: dict[str, Any], state: BlockState) -> str: ...
    def block_quote(self, token: dict[str, Any], state: BlockState) -> str: ...
    def block_html(self, token: dict[str, Any], state: BlockState) -> str: ...
    def block_error(self, token: dict[str, Any], state: BlockState) -> str: ...
    def list(self, token: dict[str, Any], state: BlockState) -> str: ...
